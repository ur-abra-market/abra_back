name: Dev Deploy

on:
  push:
    branches:
      - feat/dev_deploy_rollback

jobs:
  tests:
    uses: ./.github/workflows/tests.yml

  deploy:
    name: dev release
    runs-on: ubuntu-22.04
    needs: tests
    env:
      VM_SSH_PRIVATE_KEY_PATH: ${{ github.workspace }}/.ssh/id_ed25519
      VM_SSH_PRIVATE_KEY: ${{ secrets.DEV_VM_SSH_PRIVATE_KEY }}
      VM_SSH_HOST: ${{ secrets.DEV_VM_SSH_HOST }}
      VM_SSH_USER: ${{ secrets.DEV_VM_SSH_USER }}
      VM_WORKDIR: ${{ secrets.DEV_VM_WORKDIR }}
      VM_DEFAULT_DIR: ${{ secrets.DEV_VM_DEFAULT_DIR }}
      GITHUB_BRANCH: ${{ secrets.DEV_GITHUB_BRANCH }}
      GITHUB_REPO: git@github.com:${{ github.repository }}.git
      TEST_VM_WORKDIR: ${{ secrets.DEV_TEST_VM_WORKDIR }}
      TEST_GITHUB_BRANCH: ${{ secrets.DEV_TEST_GITHUB_BRANCH }}

    steps:
      - name: Install ssh keys
        id: ssh
        shell: bash
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          ssh-keyscan -H $VM_SSH_HOST > ~/.ssh/known_hosts

      - name: Connect to repo and clone
        id: pull
        shell: bash
        if: steps.ssh.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR;
          git clone -b $TEST_GITHUB_BRANCH --single-branch $GITHUB_REPO $GITHUB_SHA;
          exit
          "

      # - name: Fill with context
      #   id: context
      #   shell: bash
      #   run: |


      - name: Prep application
        id: prep
        shell: bash
        if: steps.pull.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
            "
            cd $TEST_VM_WORKDIR;
            touch $GITHUB_SHA/.env;
            cp $TEST_VM_WORKDIR/.env.green $TEST_VM_WORKDIR/$GITHUB_SHA/.env;
            cd $GITHUB_SHA;
            sed -i 's/COMMIT=.*/COMMIT=$GITHUB_SHA/' .env;
            exit
            "

      - name: Build
        id: build
        shell: bash
        continue-on-error: true
        if: steps.prep.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR/$GITHUB_SHA;
          make build;
          exit
          "

      - name: Apply migrations
        id: migration
        shell: bash
        continue-on-error: true
        if: steps.build.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR/$GITHUB_SHA;
          make migrations;
          exit
          "

      - name: Apply population
        id: population
        shell: bash
        continue-on-error: true
        if: steps.migration.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR/$GITHUB_SHA;
          make population;
          exit
          "

      - name: Remove new version
        id: remove_new_version
        shell: bash
        continue-on-error: true
        if: (
          steps.prep.outcome != 'success' ||
          steps.build.outcome != 'success' ||
          steps.migration.outcome != 'success' ||
          steps.population.outcome != 'success'
          )
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR/$GITHUB_SHA;
          make destroy;
          cd $TEST_VM_WORKDIR;
          rm -rf $GITHUB_SHA;
          exit
          "

      - name: Destroy previous version
        id: destroy_previous
        shell: bash
        continue-on-error: true
        if: steps.population.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR/$VM_DEFAULT_DIR;
          make destroy;
          cd $TEST_VM_WORKDIR;
          rm -rf $VM_DEFAULT_DIR;
          exit
          "

      - name: Set new version
        id: new_version
        shell: bash
        continue-on-error: true
        if: steps.destroy_previous.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR;
          mv $GITHUB_SHA $VM_DEFAULT_DIR;
          touch $VM_DEFAULT_DIR/.env;
          cp $TEST_VM_WORKDIR/.env.blue $TEST_VM_WORKDIR/$VM_DEFAULT_DIR/.env;
          cd $VM_DEFAULT_DIR;
          sed -i 's/COMMIT=.*/COMMIT=$GITHUB_SHA/' .env;
          exit
          "

      - name: Run
        id: run
        shell: bash
        continue-on-error: true
        if: steps.new_version.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $TEST_VM_WORKDIR/$VM_DEFAULT_DIR;
          make application;
          exit
          "

      - name: cleanup
        id: cleanup
        shell: bash
        run: rm -rf ~/.ssh
