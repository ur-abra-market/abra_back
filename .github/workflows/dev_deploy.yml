name: Dev Deploy

on:
  push:
    branches:
      - dev

jobs:
  # tests:
  #   uses: ./.github/workflows/tests.yml
  #   secrets:
  #     ENV_FILE: ${{ secrets.ENV_FILE }}

  deploy:
    name: Dev Release
    runs-on: ubuntu-22.04
    # needs: tests
    env:
      VM_SSH_PRIVATE_KEY_PATH: ${{ github.workspace }}/.ssh/id_ed25519
      VM_SSH_PRIVATE_KEY: ${{ secrets.DEV_VM_SSH_PRIVATE_KEY }}
      VM_SSH_HOST: ${{ secrets.DEV_VM_SSH_HOST }}
      VM_SSH_USER: ${{ secrets.DEV_VM_SSH_USER }}
      VM_WORKDIR: ${{ secrets.DEV_VM_WORKDIR }}
      VM_DEFAULT_DIR: ${{ secrets.DEV_VM_DEFAULT_DIR }}
      GITHUB_BRANCH: ${{ secrets.DEV_GITHUB_BRANCH }}
      GITHUB_REPO: git@github.com:${{ github.repository }}.git
      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Install ssh keys
        id: ssh
        shell: bash
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          ssh-keyscan -H $VM_SSH_HOST > ~/.ssh/known_hosts

      - name: Destroy previous version
        id: destroy_previous
        shell: bash
        continue-on-error: true
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR/$VM_DEFAULT_DIR;
          make destroy;
          cd $VM_WORKDIR;
          rm -rf $VM_DEFAULT_DIR;
          exit
          "

      - name: Remove unused images
        id: remove_images
        shell: bash
        if: steps.destroy_previous.outcome == 'success'
        continue-on-error: true
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          docker image prune -af;
          exit
          "

      - name: Connect to repo and clone
        id: clone
        shell: bash
        if: steps.remove_images.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR;
          git clone -b $GITHUB_BRANCH --single-branch $GITHUB_REPO $VM_DEFAULT_DIR;
          exit
          "

      - name: Prep application
        id: prep
        shell: bash
        if: steps.clone.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR;
          cp .env $VM_DEFAULT_DIR/.env;
          sed -i 's/COMMIT=.*/COMMIT=$GITHUB_SHA/' $VM_DEFAULT_DIR/.env;
          exit
          "

      - name: Build
        id: build
        shell: bash
        if: steps.prep.outcome == 'success'
        continue-on-error: true
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR/$VM_DEFAULT_DIR;
          make build;
          exit
          "

      - name: Apply migrations
        id: migration
        shell: bash
        if: steps.build.outcome == 'success'
        continue-on-error: true
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR/$VM_DEFAULT_DIR;
          make migrations;
          exit
          "

      - name: Apply population
        id: population
        shell: bash
        if: steps.migration.outcome == 'success'
        continue-on-error: true
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR/$VM_DEFAULT_DIR;
          make population;
          exit
          "

      - name: Run
        id: run
        shell: bash
        if: steps.population.outcome == 'success'
        continue-on-error: true
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST
          "
          cd $VM_WORKDIR/$VM_DEFAULT_DIR;
          make application-d;
          exit
          "

      - name: Cleanup
        id: cleanup
        shell: bash
        run: rm -rf ~/.ssh
