name: Dev Deploy

on:
  push:
    branches:
      - feat/dev_deploy_rollback

jobs:
  tests:
    uses: ./.github/workflows/tests.yml

  deploy:
    name: dev release
    runs-on: ubuntu-22.04
    needs: tests
    env:
      VM_SSH_PRIVATE_KEY_PATH: ${{ github.workspace }}/.ssh/id_ed25519
      VM_SSH_PRIVATE_KEY: ${{ secrets.DEV_VM_SSH_PRIVATE_KEY }}
      VM_SSH_HOST: ${{ secrets.DEV_VM_SSH_HOST }}
      VM_SSH_USER: ${{ secrets.DEV_VM_SSH_USER }}
      VM_WORKDIR: ${{ secrets.DEV_VM_WORKDIR }}
      GITHUB_BRANCH: ${{ secrets.DEV_GITHUB_BRANCH }}
      GITHUB_REPO: git@github.com:${{ github.repository }}.git
      TEST_VM_WORKDIR: ${{ secrets.DEV_TEST_VM_WORKDIR }}
      TEST_GITHUB_BRANCH: ${{ secrets.DEV_TEST_GITHUB_BRANCH }}

    steps:
      - name: Install ssh keys
        id: ssh
        shell: bash
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_ed25519
          echo "$VM_SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          ssh-keyscan -H $VM_SSH_HOST > ~/.ssh/known_hosts

      - name: Connect to repo and pull
        id: pull
        shell: bash
        if: steps.ssh.outcome == 'success'
        run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "cd $TEST_VM_WORKDIR && git clone -b $TEST_GITHUB_BRANCH --single-branch $GITHUB_REPO $GITHUB_SHA && cd $GITHUB_SHA && git pull && exit"

      - name: Prep application
        id: prep
        shell: bash
        run: |
          ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "
            cd $TEST_VM_WORKDIR &&
            cp .env $GITHUB_SHA/.env &&
            cd $GITHUB_SHA &&
            ls -la &&
            sed -i '' -e 's/COMMIT=.*/COMMIT=$GITHUB_SHA/' .env &&
            sed -i '' -e 's/name:.*/name: \"$GITHUB_SHA\"/' docker/compose/main.py
            "

      # - name: destroy previous version
      #   id: destroy_previous
      #   shell: bash
      #   continue-on-error: true
      #   run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "cd $VM_WORKDIR && make destroy clean && exit"

      # - name: Build
      #   id: build
      #   shell: bash
      #   continue-on-error: true
      #   if: steps.destroy_previous.outcome == 'success'
      #   run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "cd $VM_WORKDIR && make build && exit"

      # - name: Apply migrations
      #   id: migration
      #   shell: bash
      #   continue-on-error: true
      #   if: steps.build.outcome == 'success'
      #   run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "cd $VM_WORKDIR && make migrations && exit"

      # - name: Apply population
      #   id: population
      #   shell: bash
      #   continue-on-error: true
      #   if: steps.migration.outcome == 'success'
      #   run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "cd $VM_WORKDIR && make population && exit"

      # - name: Run
      #   id: run
      #   shell: bash
      #   continue-on-error: true
      #   if: steps.population.outcome == 'success'
      #   run: ssh -i $VM_SSH_PRIVATE_KEY_PATH $VM_SSH_USER@$VM_SSH_HOST "cd $VM_WORKDIR && make application && exit"

      # - name: Rollback
      #   id: rollback
      #   shell: bash
      #   continue-on-error: true
      #   if: steps.pull.outcome == 'success' && (
      #     steps.build.outcome != 'success' ||
      #     steps.migration.outcome != 'success' ||
      #     steps.population.outcome != 'success'
      #     )
      #   run: |

      # - name: dump context
      #   id: dump
      #   shell: bash
      #   continue-on-error: false
      #   if: steps.run.outcome == 'success'
      #   run: |


      - name: cleanup
        id: cleanup
        shell: bash
        run: rm -rf ~/.ssh
